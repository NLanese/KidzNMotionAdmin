generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model JWTToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  token     String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  active    Boolean
}

model LoginAttempts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model PasswordResetKey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  active    Boolean
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  firstName         String?
  lastName          String?
  password          String
  role              Role               @default(GUARDIAN)
  jwtTokens         JWTToken[]
  loginAttemps      LoginAttempts[]
  createdAt         DateTime           @default(now())
  passwordResetKeys PasswordResetKey[]
  active            Boolean            @default(true)
  dateOfBirth       DateTime?
  phoneNumber       String?

  children   User[]  @relation("children")
  guardian   User?   @relation("children", fields: [guardianId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  guardianId String? @map("guardianId")

  ownedOrganization Organization?
  childCarePlans    ChildCarePlan[]    @relation("child")
  patientCarePlans  ChildCarePlan[]    @relation("therapist")
  organizations     OrganizationUser[]

  chatRooms Chatroom[]
}

model OrganizationUser {
  id             String        @id @default(uuid())
  active         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
}

model Organization {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  organizationType     ORGANIZATION_TYPE  @default(SCHOOL)
  phoneNumber          String?
  name                 String?
  stripeSubscriptionID String?
  subscriptionStatus   String?
  active               Boolean            @default(true)
  owner                User               @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownerId              String             @unique
  organizationUsers    OrganizationUser[]
}

enum Role {
  CHILD
  GUARDIAN
  THERAPIST
  SCHOOL_ADMIN
}

enum ORGANIZATION_TYPE {
  SCHOOL
  PRACTICE
}

model ChildCarePlan {
  id      String  @id @default(uuid())
  child   User?   @relation("child", fields: [childId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childId String?

  therapist   User?   @relation("therapist", fields: [therapistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  therapistId String?

  level             Int     @default(1)
  allVideoStatus    Json?
  weeklyVideoStatus Json?
  active            Boolean @default(true)

  assignments Assignment[]
}

model Assignment {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  dateStart       String
  dateDue         String
  title           String
  description     String
  childCarePlan   ChildCarePlan? @relation(fields: [childCarePlanId], references: [id])
  childCarePlanId String?
  videos          Video[]
}

model Video {
  id           String      @id @default(uuid())
  contentfulID String
  medals       Medal[]
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId String?
}

enum MEDAL_LEVEL {
  BLUE
  BRONZE
  SILVER
  GOLD
}

model Medal {
  id          String @id @default(uuid())
  title       String
  image       String @default("Default")
  description String

  level MEDAL_LEVEL @default(BLUE)

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?
}

model Chatroom {
  id       String    @id @default(uuid())
  users    User[]
  messages Message[]
  active    Boolean
}

model Message {

  id      String @id @default(uuid())
  content String
  sentAt  Json
  sentBy  Json

  chatroomId String
  chatRoom   Chatroom @relation(fields: [chatroomId], references: [id])
}
