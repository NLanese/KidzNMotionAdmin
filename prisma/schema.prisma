generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
  relationMode      = "prisma"
}

model JWTToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  token     String?
  userId    String?
  active    Boolean  @default(true)
  user      User?    @relation(fields: [userId], references: [id])
}

model LoginAttempts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model PasswordResetKey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model OrganizationInviteKey {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  active                Boolean       @default(true)
  userId                String?
  organizationId        String?
  role                  Role          @default(GUARDIAN)
  additionalInformation Json?
  user                  User?         @relation(fields: [userId], references: [id])
  organization          Organization? @relation(fields: [organizationId], references: [id])
}

model User {
  id                       String                  @id @default(uuid())
  email                    String                  @unique
  username                 String?                 @unique
  firstName                String?
  lastName                 String?
  password                 String
  phoneNumber              String?
  profilePic               Json?
  role                     Role                    @default(GUARDIAN)
  createdAt                DateTime                @default(now())
  fcmToken                 String?
  childDateOfBirth         String?
  diagnosis                String?
  colorSettings            String                  @default("Orange")
  webAppColorSettings      String                  @default("#ff9800")
  messagesMuted            Boolean                 @default(false)
  assignMuted              Boolean                 @default(false)
  msgNotifications         Boolean                 @default(false)
  missedDateNotifications  Boolean                 @default(false)
  solo                     Boolean                 @default(false)
  soloStripeSubscriptionID String?
  soloSubscriptionStatus   String?
  unlockedAvatarPieces     Json?
  title                    String?
  appointmentNotifications Boolean                 @default(true)
  muteAllMessages          Boolean                 @default(false)
  muteAllAssignments       Boolean                 @default(false)
  accessSettings           Boolean                 @default(false)
  accessMessages           Boolean                 @default(false)
  leaveApp                 Boolean                 @default(false)
  active                   Boolean                 @default(true)
  guardianId               String?
  jwtTokens                JWTToken[]
  loginAttemps             LoginAttempts[]
  passwordResetKeys        PasswordResetKey[]
  children                 User[]                  @relation("children")
  guardian                 User?                   @relation("children", fields: [guardianId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownedOrganization        Organization?
  childCarePlans           ChildCarePlan[]         @relation("child")
  patientCarePlans         ChildCarePlan[]         @relation("therapist")
  organizations            OrganizationUser[]
  chatRooms                Chatroom[]
  organizationInviteKeys   OrganizationInviteKey[]
  videos                   Video[]
  comments                 Comment[]               @relation("therapistComments")
  meetings                 Meeting[]
}

model OrganizationUser {
  id             String        @id @default(uuid())
  active         Boolean       @default(true)
  createdAt      DateTime      @default(now())
  organizationId String?
  userId         String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
}

model Organization {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  organizationType       ORGANIZATION_TYPE       @default(SCHOOL)
  phoneNumber            String?
  name                   String?
  stripeSubscriptionID   String?
  subscriptionStatus     String?
  active                 Boolean                 @default(true)
  ownerId                String                  @unique
  owner                  User                    @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizationUsers      OrganizationUser[]
  organizationInviteKeys OrganizationInviteKey[]
}

model ChildCarePlan {
  id                String       @id @default(uuid())
  childId           String?
  therapistId       String?
  level             Int          @default(1)
  allVideoStatus    Json?
  weeklyVideoStatus Json?
  active            Boolean      @default(true)
  blockedVideos     Json?
  child             User?        @relation("child", fields: [childId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  therapist         User?        @relation("therapist", fields: [therapistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignments       Assignment[]
  comments          Comment[]
  medals            Medal[]
}

model Comment {
  id              String         @id @default(uuid())
  content         String
  createdAt       DateTime       @default(now())
  therapistId     String?
  childCarePlanId String?
  assignmentId    String?
  videoId         String?
  therapist       User?          @relation("therapistComments", fields: [therapistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childCarePlan   ChildCarePlan? @relation(fields: [childCarePlanId], references: [id])
}

model Assignment {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  dateStart        String?
  dateDue          String
  title            String
  description      String
  seen             Boolean        @default(false)
  notificationSent Boolean        @default(false)
  childCarePlanId  String?
  childCarePlan    ChildCarePlan? @relation(fields: [childCarePlanId], references: [id])
  videos           Video[]
}

model Meeting {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  meetingDateTime DateTime?
  title           String?
  completed       Boolean      @default(false)
  canceled        Boolean      @default(false)
  type            MEETING_TYPE @default(PHONE)
  pendingApproval Boolean      @default(false)
  approved        Boolean      @default(false)
  meetingOwnerID  String
  users           User[]
}

model Video {
  id           String       @id @default(uuid())
  contentfulID String
  previewPic   String       @default("Default")
  completed    Boolean      @default(false)
  title        String
  description  String
  level        Int
  medals       Medal[]
  assignments  Assignment[]
  users        User[]
}

model Medal {
  id            String         @id @default(uuid())
  title         String
  image         String         @default("Default")
  description   String
  createdAt     DateTime       @default(now())
  level         MEDAL_LEVEL    @default(BLUE)
  videoId       String?
  video         Video?         @relation(fields: [videoId], references: [id])
  childCarePlanId String?
  childCarePlan ChildCarePlan? @relation(fields: [childCarePlanId], references: [id])
}

model Chatroom {
  id        String    @id @default(uuid())
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  users     User[]
  messages  Message[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sentAt     Json
  sentBy     Json
  createdAt  String
  chatroomId String
  chatRoom   Chatroom @relation(fields: [chatroomId], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title       String?
  description String?
  type        String?
  toUserId    String?
  fromUserId  String?
  dismissed   Boolean  @default(false)
}

model ChatroomToUser {
  A String
  B String

  @@unique([A, B], map: "_ChatroomToUser_AB_unique")
  @@index([B], map: "_ChatroomToUser_B_index")
  @@map("_ChatroomToUser")
}

model AssignmentToVideo {
  A String
  B String

  @@unique([A, B], map: "_AssignmentToVideo_AB_unique")
  @@index([B], map: "_AssignmentToVideo_B_index")
  @@map("_AssignmentToVideo")
}

model MeetingToUser {
  A String
  B String

  @@unique([A, B], map: "_MeetingToUser_AB_unique")
  @@index([B], map: "_MeetingToUser_B_index")
  @@map("_MeetingToUser")
}

model UserToVideo {
  A String
  B String

  @@unique([A, B], map: "_UserToVideo_AB_unique")
  @@index([B], map: "_UserToVideo_B_index")
  @@map("_UserToVideo")
}

enum Role {
  CHILD
  GUARDIAN
  THERAPIST
  ADMIN
}

enum ORGANIZATION_TYPE {
  SCHOOL
  PRACTICE
}

enum MEDAL_LEVEL {
  BLUE
  BRONZE
  SILVER
  GOLD
}

enum MEETING_TYPE {
  IN_PERSON
  PHONE
}
