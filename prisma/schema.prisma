generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model JWTToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  token     String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  active    Boolean  @default(true)
}

model LoginAttempts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model PasswordResetKey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model OrganizationInviteKey {
  id                    String        @id @default(uuid())
  createdAt             DateTime      @default(now())
  active                Boolean       @default(true)
  user                  User?         @relation(fields: [userId], references: [id])
  userId                String?
  organization          Organization? @relation(fields: [organizationId], references: [id])
  organizationId        String?
  role                  Role          @default(GUARDIAN)
  additionalInformation Json?
}

model User {
  // Basic Info //
  id          String   @id @default(uuid())
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  password    String
  phoneNumber String?
  profilePic  Json?
  role        Role     @default(GUARDIAN)
  createdAt   DateTime @default(now())
  ////////////////

  // Parent / Child Specific //
  childDateOfBirth        String?
  colorSettings           String  @default("Orange")
  messagesMuted           Boolean @default(false)
  assignMuted             Boolean @default(false)
  msgNotifications        Boolean @default(false)
  missedDateNotifications Boolean @default(false)
  solo                    Boolean @default(false)
  ////////////////////////////

  // Therapist Specific //
  title                    String?
  appointmentNotifications Boolean @default(true)
  muteAllMessages          Boolean @default(false)
  muteAllAssignments       Boolean @default(false)
  ////////////////////////

  // Child Security Settings //
  accessSettings Boolean @default(false)
  accessMessages Boolean @default(false)
  leaveApp       Boolean @default(false)
  ////////////////////////

  // Security //
  jwtTokens         JWTToken[]
  loginAttemps      LoginAttempts[]
  passwordResetKeys PasswordResetKey[]
  active            Boolean            @default(true)
  //////////////

  // Connections //
  children   User[]  @relation("children")
  guardianId String?
  guardian   User?   @relation("children", fields: [guardianId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  ownedOrganization Organization?

  childCarePlans   ChildCarePlan[] @relation("child")
  patientCarePlans ChildCarePlan[] @relation("therapist")

  organizations OrganizationUser[]
  chatRooms     Chatroom[]

  organizationInviteKeys OrganizationInviteKey[]
  videos                 Video[]
}

model OrganizationUser {
  id             String        @id @default(uuid())
  active         Boolean       @default(true)
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
}

model Organization {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  organizationType       ORGANIZATION_TYPE       @default(SCHOOL)
  phoneNumber            String?
  name                   String?
  stripeSubscriptionID   String?
  subscriptionStatus     String?
  active                 Boolean                 @default(true)
  owner                  User                    @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ownerId                String                  @unique
  organizationUsers      OrganizationUser[]
  organizationInviteKeys OrganizationInviteKey[]
}

model ChildCarePlan {
  id                String  @id @default(uuid())
  child             User?   @relation("child", fields: [childId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childId           String?
  therapist         User?   @relation("therapist", fields: [therapistId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  therapistId       String?
  level             Int     @default(1)
  allVideoStatus    Json?
  weeklyVideoStatus Json?
  active            Boolean @default(true)

  assignments Assignment[]
}

model Assignment {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  dateStart   String?
  dateDue     String
  title       String
  description String

  seen Boolean @default(false)

  childCarePlan   ChildCarePlan? @relation(fields: [childCarePlanId], references: [id])
  childCarePlanId String?
  videos          Video[]
}

model Video {
  id           String @id @default(uuid())
  contentfulID String
  previewPic   String @default("Default") // Client Side 

  medals      Medal[]
  assignments Assignment[]
  users       User[]

  title       String
  description String
  level       Int
}

model Medal {
  id          String   @id @default(uuid())
  title       String
  image       String   @default("Default")
  description String
  createdAt   DateTime @default(now())

  level   MEDAL_LEVEL @default(BLUE)
  video   Video?      @relation(fields: [videoId], references: [id])
  videoId String?
}

model Chatroom {
  id String @id @default(uuid())

  users    User[]
  messages Message[]

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sentAt     Json
  sentBy     Json
  createdAt  String
  chatroomId String
  chatRoom   Chatroom @relation(fields: [chatroomId], references: [id])
}

model ChatroomToUser {
  A String
  B String

  @@unique([A, B], map: "_ChatroomToUser_AB_unique")
  @@index([B], map: "_ChatroomToUser_B_index")
  @@map("_ChatroomToUser")
}

enum Role {
  CHILD
  GUARDIAN
  THERAPIST
  ADMIN
}

enum ORGANIZATION_TYPE {
  SCHOOL
  PRACTICE
}

enum MEDAL_LEVEL {
  BLUE
  BRONZE
  SILVER
  GOLD
}
